# Generated by Django 4.2.5 on 2024-06-12 01:14

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Phase",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "agregate_state",
                    models.CharField(
                        choices=[
                            ("Crystal", "Crystal"),
                            ("Liquid", "Liquid"),
                            ("Gas", "Gas"),
                            ("Glass", "Glass"),
                            ("High elastic", "High_elastic"),
                            ("Condensed", "Condensed"),
                            ("Devitrified", "Devitrified"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "number_phase",
                    models.IntegerField(
                        choices=[
                            (1, "I"),
                            (2, "II"),
                            (3, "III"),
                            (4, "IV"),
                            (5, "V"),
                            (6, "VI"),
                            (7, "VII"),
                            (8, "VIII"),
                            (9, "IX"),
                            (10, "X"),
                        ]
                    ),
                ),
                ("degree_of_crystallinity", models.FloatField(default=0)),
                ("enthalpy_of_combustion", models.FloatField(default=0)),
                ("enthalpy_of_combustion_err", models.FloatField(default=0)),
                ("enthalpy_of_formation", models.FloatField(default=0)),
                ("enthalpy_of_formation_err", models.FloatField(default=0)),
                ("entropy_of_formation", models.FloatField(default=0)),
                ("entropy_of_formation_err", models.FloatField(default=0)),
                ("gibbs_energy_of_formation", models.FloatField(default=0)),
                ("gibbs_energy_of_formation_err", models.FloatField(default=0)),
                ("lnK", models.FloatField(default=0)),
                ("residual_entropy_at_0_k", models.FloatField(default=0)),
                ("residual_entropy_at_0_k_err", models.FloatField(default=0)),
                ("configurational_entropy", models.FloatField(default=0)),
                ("configurational_entropy_err", models.FloatField(default=0)),
                ("difference_of_zero", models.FloatField(default=0)),
                ("difference_of_zero_err", models.FloatField(default=0)),
                (
                    "T",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.FloatField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "Cp",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.FloatField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "HT_H0",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.FloatField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "ST",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.FloatField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "GT",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.FloatField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
            ],
            options={
                "verbose_name": "состояние",
                "verbose_name_plural": "состояния",
            },
        ),
        migrations.CreateModel(
            name="Source",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("description", models.TextField()),
                ("url", models.URLField(blank=True, null=True)),
                ("doi", models.CharField(max_length=100)),
            ],
            options={
                "verbose_name": "литература",
                "verbose_name_plural": "список литературы",
            },
        ),
        migrations.CreateModel(
            name="SubstanceClass",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
            ],
            options={
                "verbose_name": "класс вещества",
                "verbose_name_plural": "классы веществ",
            },
        ),
        migrations.CreateModel(
            name="Transition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "source_phase",
                    models.CharField(
                        choices=[
                            ("Crystal", "Crystal"),
                            ("Liquid", "Liquid"),
                            ("Gas", "Gas"),
                            ("Glass", "Glass"),
                            ("High elastic", "High_elastic"),
                            ("Condensed", "Condensed"),
                            ("Devitrified", "Devitrified"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "target_phase",
                    models.CharField(
                        choices=[
                            ("Crystal", "Crystal"),
                            ("Liquid", "Liquid"),
                            ("Gas", "Gas"),
                            ("Glass", "Glass"),
                            ("High elastic", "High_elastic"),
                            ("Condensed", "Condensed"),
                            ("Devitrified", "Devitrified"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "source_phase_number",
                    models.IntegerField(
                        choices=[
                            (1, "I"),
                            (2, "II"),
                            (3, "III"),
                            (4, "IV"),
                            (5, "V"),
                            (6, "VI"),
                            (7, "VII"),
                            (8, "VIII"),
                            (9, "IX"),
                            (10, "X"),
                        ]
                    ),
                ),
                (
                    "target_phase_number",
                    models.IntegerField(
                        choices=[
                            (1, "I"),
                            (2, "II"),
                            (3, "III"),
                            (4, "IV"),
                            (5, "V"),
                            (6, "VI"),
                            (7, "VII"),
                            (8, "VIII"),
                            (9, "IX"),
                            (10, "X"),
                        ]
                    ),
                ),
                ("temperature", models.FloatField(default=0)),
                ("temperature_err", models.FloatField(default=0)),
                ("enthalpy_transition", models.FloatField(default=0)),
                ("enthalpy_transition_err", models.FloatField(default=0)),
                ("entropy_transition", models.FloatField(default=0)),
                ("entropy_transition_err", models.FloatField(default=0)),
                ("jump_heat_capacity", models.FloatField(default=0)),
                ("start_temperature", models.FloatField(default=0)),
                ("end_temperature", models.FloatField(default=0)),
            ],
            options={
                "verbose_name": "переход",
                "verbose_name_plural": "переходы",
            },
        ),
        migrations.CreateModel(
            name="Substance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "substance_type",
                    models.CharField(
                        choices=[
                            ("Мономер", "Мономер"),
                            ("Полимер", "Полимер"),
                            ("Олигомер", "Олигомер"),
                            ("неизвестно", "неизвестно"),
                        ],
                        max_length=20,
                    ),
                ),
                ("name", models.CharField(max_length=150)),
                ("formula", models.CharField(max_length=100)),
                (
                    "source",
                    models.CharField(blank=True, default="", max_length=100, null=True),
                ),
                ("cas", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "literatura",
                    models.ManyToManyField(blank=True, null=True, to="myapp.source"),
                ),
                (
                    "phases",
                    models.ManyToManyField(blank=True, null=True, to="myapp.phase"),
                ),
                (
                    "substance_class",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="myapp.substanceclass",
                    ),
                ),
                (
                    "transitions",
                    models.ManyToManyField(
                        blank=True, null=True, to="myapp.transition"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "соединение",
                "verbose_name_plural": "соединения",
            },
        ),
    ]
